{"version":3,"file":"js/722.5cfcb302.js","mappings":"siBA4BA,MAAMA,GAAQC,EAAAA,EAAAA,OACOA,EAAAA,EAAAA,MACrB,IAAIC,EAAO,EACX,MAAMC,GAASF,EAAAA,EAAAA,MAETG,IADgBH,EAAAA,EAAAA,OACVA,EAAAA,EAAAA,OACNI,EAAS,IAAIC,UAAU,uBAQ7B,SAASC,IACLF,EAAOG,OAAS,KACZC,QAAQC,IAAI,gBAAgB,CAEpC,CACAC,eAAeC,IACXH,QAAQC,IAAI,8BACZG,WAAWN,IAAc,IAC7B,CACA,SAASO,IACLX,EAAOY,MAAQC,SAASC,eAAe,UACvCb,EAAIW,MAAQZ,EAAOY,MAAMG,WAAW,MACjCC,UAAUC,aACTD,UAAUC,aAAaC,aAAa,CAACrB,OAAM,EAAKsB,OAAM,IAAQC,MAAMC,IAChExB,EAAMe,MAAMU,UAAYD,EACxBxB,EAAMe,MAAMW,OACZ,IAAKC,EAAgB,IAAIC,cAAcJ,GACvCG,EAAcE,gBAAmBC,IACjC,GAAIA,EAAMC,MAAQD,EAAMC,KAAKC,KAAO,GAAc,IAAT9B,EAAY,CACjD,MAAMC,EAASa,SAASiB,cAAc,UACtC9B,EAAO+B,MAAQlC,EAAMe,MAAMoB,WAC3BhC,EAAOiC,OAASpC,EAAMe,MAAMsB,YAC5B,MAAMjC,EAAMD,EAAOe,WAAW,MAC9Bd,EAAIkC,UAAUtC,EAAMe,MAAO,EAAG,EAAGZ,EAAO+B,MAAO/B,EAAOiC,QAEtD,MAAMG,EAAkBpC,EAAOqC,UAAU,cAGzCnC,EAAOoC,KAAKF,EAChB,GAEAZ,EAAce,MAAM,GAAG,IACxBC,OAAOC,IACNnC,QAAQC,IAAIkC,EAAI,IAIpBzB,UAAUC,aAAa,CAAC,CAEhC,CAIA,SAASyB,IACL,IAAIrB,EAASxB,EAAMe,MAAMU,UACzB,IAAKD,EAAQ,OACb,IAAIsB,EAAStB,EAAOuB,YACpBD,EAAOE,SAASC,IAChBA,EAAEC,MAAM,GAEZ,CACA,SAASC,IACLjD,EAAO,EACPO,QAAQC,IAAI,QACZL,EAAO+C,UAAatB,IACpBrB,QAAQC,IAAIoB,EAAMC,MAClB,IAAIsB,EAAYvB,EAAMC,KAEtB,GAAIsB,aAAqBC,MAAqD,OAA7CtC,SAASC,eAAe,iBAA2B,CAEhF,MAAMb,EAAMY,SAASC,eAAe,iBAAiBC,WAAW,MAC1DqC,EAAgBvC,SAASC,eAAe,iBAExCuC,EAAWC,IAAIC,gBAAgBL,GAC/BM,EAAM,IAAIC,MAChBD,EAAIE,OAAS,KAETN,EAAcrB,MAAQyB,EAAIzB,MAC1BqB,EAAcnB,OAASuB,EAAIvB,OAE3BhC,EAAIkC,UAAUqB,EAAK,EAAG,GAEtBF,IAAIK,gBAAgBN,EAAS,EAGjCG,EAAII,IAAMP,CACd,MACI/C,QAAQuD,MAAM,sCAClB,CAEJ,CAEA,SAASC,IACL/D,EAAO,EACPO,QAAQC,IAAI,OAChB,C,OA5FAwD,EAAAA,EAAAA,KAAU,KACNzD,QAAQC,IAAI,cACZI,IAEAP,IACAK,GAAc,KA0ClBuD,EAAAA,EAAAA,KAAgB,S,wvBC5EhB,MAAMC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://face_anti_front/./src/components/onlineAlaysis.vue","webpack://face_anti_front/./src/components/onlineAlaysis.vue?daf4"],"sourcesContent":["<template>\r\n <div class=\"container\">\r\n    \r\n    <div style=\"display: flex;flex-direction: row;\">\r\n        <div>\r\n            <video  src=\"\" ref=\"video\" id=\"video\"></video>\r\n            <canvas id=\"camera\"></canvas>\r\n        </div>\r\n        <div>\r\n            <canvas id=\"camera_result\"></canvas>\r\n        </div>\r\n        \r\n    </div>\r\n    <div class=\"botton_box\">\r\n        <el-button type=\"primary\" @click=\"getCamera()\">打开摄像头</el-button>\r\n        <el-button type=\"danger\" @click=\"closeCamera()\">关闭摄像头</el-button>\r\n        <el-button type=\"primary\" @click=\"getDetection()\">开始检测</el-button>\r\n        <el-button type=\"danger\" @click=\"closeDetection()\">关闭检测</el-button>\r\n        <el-button type=\"primary\" @click=\"function(){}\">保存截图</el-button>\r\n        \r\n    </div>\r\n    \r\n </div>\r\n</template>\r\n\r\n<script setup>\r\nimport instance from '@/service';\r\nimport {ref,onMounted,onBeforeUnmount,} from 'vue';\r\nconst video = ref()\r\nconst video_result = ref()\r\nlet flag = 0\r\nconst canvas = ref()\r\nconst canvas_result = ref()\r\nconst ctx = ref()\r\nconst socket = new WebSocket('ws://localhost:8888');\r\nonMounted(()=>{\r\n    console.log('正在打开摄像头。。。')\r\n    getCamera()\r\n    //连接后端socket\r\n    connection()\r\n    reconnection()\r\n})\r\nfunction connection(){\r\n    socket.onopen = ()=>{\r\n        console.log('socket 已打开...')\r\n    }\r\n}\r\nasync function reconnection(){\r\n    console.log('Attempting to reconnect...');\r\n    setTimeout(connection(), 3000); // 3秒后尝试重新连接\r\n}\r\nfunction getCamera(){\r\n    canvas.value = document.getElementById('camera');\r\n    ctx.value = canvas.value.getContext('2d');\r\n    if(navigator.mediaDevices){\r\n        navigator.mediaDevices.getUserMedia({video:true,audio:false}).then((stream)=>{\r\n            video.value.srcObject = stream;\r\n            video.value.play();\r\n            let  mediaRecorder = new MediaRecorder(stream);\r\n            mediaRecorder.ondataavailable = (event) => {\r\n            if (event.data && event.data.size > 0 && flag === 1) {\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = video.value.videoWidth;\r\n                canvas.height = video.value.videoHeight;\r\n                const ctx = canvas.getContext('2d');\r\n                ctx.drawImage(video.value, 0, 0, canvas.width, canvas.height);\r\n                // 将图像数据编码为 base64 字符串\r\n                const base64ImageData = canvas.toDataURL('image/jpeg');\r\n                // 发送 base64 编码后的图像数据给后端处理\r\n                //如果socket连接后才开始发送\r\n                socket.send(base64ImageData);\r\n            }\r\n    };\r\n            mediaRecorder.start(33);\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }else{\r\n        //防止浏览器版本旧不支持mediaDevices\r\n        navigator.mediaDevices={}\r\n    }\r\n}\r\nonBeforeUnmount(()=>{\r\n    //closeCamera();\r\n})\r\nfunction closeCamera(){\r\n    let stream = video.value.srcObject;\r\n    if (!stream) return;\r\n    let tracks = stream.getTracks();\r\n    tracks.forEach((x) => {\r\n    x.stop();\r\n    });\r\n}\r\nfunction getDetection(){\r\n    flag = 1;\r\n    console.log(\"开始检测\")\r\n    socket.onmessage = (event) => {\r\n    console.log(event.data);\r\n    let imageData = event.data;\r\n    // 检查是否为 Blob 对象\r\n    if (imageData instanceof Blob && document.getElementById('camera_result') !== null) {\r\n        // 解码并显示图片\r\n        const ctx = document.getElementById('camera_result').getContext('2d');\r\n        const canvas_result = document.getElementById('camera_result');\r\n        // 将接收到的 blob 格式的图像数据转换为 URL\r\n        const imageUrl = URL.createObjectURL(imageData);\r\n        const img = new Image();\r\n        img.onload = ()=>{\r\n            // 设置画布的宽度和高度\r\n            canvas_result.width = img.width;\r\n            canvas_result.height = img.height;\r\n            // 绘制图像到画布上\r\n            ctx.drawImage(img, 0, 0);\r\n            // 释放 URL 对象\r\n            URL.revokeObjectURL(imageUrl);\r\n        };\r\n        // 设置图像的 src\r\n        img.src = imageUrl;\r\n    } else {\r\n        console.error(\"Received data is not a Blob object.\");\r\n    }\r\n};\r\n}\r\n\r\nfunction closeDetection(){\r\n    flag = 0;\r\n    console.log(\"关闭检测\")\r\n}\r\n\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.container{\r\n    display: flex;\r\n    width: 84vw;\r\n    max-height: 90vh;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: #f0f0f0;\r\n    padding-top: 1%;\r\n    padding-bottom: 3%;\r\n}\r\n#camera{\r\n    width:0;\r\n    height:0;\r\n    display: none;\r\n}\r\nvideo , #camera_result{\r\n    width:40vw;\r\n    margin-left: 10px;\r\n}\r\n.botton_box{\r\n    margin-top: 10px;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n</style>","import script from \"./onlineAlaysis.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./onlineAlaysis.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./onlineAlaysis.vue?vue&type=style&index=0&id=371ed02f&scoped=true&lang=scss\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-371ed02f\"]])\n\nexport default __exports__"],"names":["video","ref","flag","canvas","ctx","socket","WebSocket","connection","onopen","console","log","async","reconnection","setTimeout","getCamera","value","document","getElementById","getContext","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","mediaRecorder","MediaRecorder","ondataavailable","event","data","size","createElement","width","videoWidth","height","videoHeight","drawImage","base64ImageData","toDataURL","send","start","catch","err","closeCamera","tracks","getTracks","forEach","x","stop","getDetection","onmessage","imageData","Blob","canvas_result","imageUrl","URL","createObjectURL","img","Image","onload","revokeObjectURL","src","error","closeDetection","onMounted","onBeforeUnmount","__exports__"],"sourceRoot":""}