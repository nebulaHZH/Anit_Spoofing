{"ast":null,"code":"import { ref, onMounted, onBeforeUnmount } from 'vue';\nexport default {\n  __name: 'onlineAlaysis',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const video = ref();\n    const mediaStreamTrack = ref({});\n    const canvas = ref();\n    const ctx = ref();\n    const socket = new WebSocket('ws://localhost:8888');\n    const mediaRecorder = ref();\n    onMounted(() => {\n      console.log('正在打开摄像头。。。');\n      getCamera();\n      //连接后端socket\n      connection();\n      reconnection();\n    });\n    function connection() {\n      socket.onopen = () => {\n        console.log('socket 已打开...');\n      };\n    }\n    async function reconnection() {\n      console.log('Attempting to reconnect...');\n      setTimeout(connection(), 3000); // 3秒后尝试重新连接\n    }\n    function getCamera() {\n      canvas.value = document.getElementById('camera');\n      ctx.value = canvas.value.getContext('2d');\n      if (navigator.mediaDevices) {\n        navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: false\n        }).then(stream => {\n          video.value.srcObject = stream;\n          video.value.play();\n          let mediaRecorder = new MediaRecorder(stream);\n          mediaRecorder.ondataavailable = event => {\n            console.log(event.data, \"aaaa\");\n            if (event.data && event.data.size > 0) {\n              console.log(\"aaaaa\");\n              const canvas = document.createElement('canvas');\n              canvas.width = video.value.videoWidth;\n              canvas.height = video.value.videoHeight;\n              console.log(video.value.videoWidth);\n              const ctx = canvas.getContext('2d');\n              ctx.drawImage(video.value, 0, 0, canvas.width, canvas.height);\n              // 将图像数据编码为 base64 字符串\n              const base64ImageData = canvas.toDataURL('image/jpeg');\n              // 发送 base64 编码后的图像数据给后端处理\n              socket.send(base64ImageData);\n            }\n          };\n          mediaRecorder.start(66);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        //防止浏览器版本旧不支持mediaDevices\n        navigator.mediaDevices = {};\n      }\n    }\n    onBeforeUnmount(() => {\n      //closeCamera();\n    });\n    function closeCamera() {\n      let stream = video.value.srcObject;\n      if (!stream) return;\n      let tracks = stream.getTracks();\n      tracks.forEach(x => {\n        x.stop();\n      });\n    }\n    function getDetection() {\n      console.log('WebSocket connection established.');\n    }\n    function closeDetection() {\n      mediaRecorder.value.stop();\n    }\n    const __returned__ = {\n      video,\n      mediaStreamTrack,\n      canvas,\n      ctx,\n      socket,\n      mediaRecorder,\n      connection,\n      reconnection,\n      getCamera,\n      closeCamera,\n      getDetection,\n      closeDetection,\n      ref,\n      onMounted,\n      onBeforeUnmount\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onBeforeUnmount","video","mediaStreamTrack","canvas","ctx","socket","WebSocket","mediaRecorder","console","log","getCamera","connection","reconnection","onopen","setTimeout","value","document","getElementById","getContext","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","MediaRecorder","ondataavailable","event","data","size","createElement","width","videoWidth","height","videoHeight","drawImage","base64ImageData","toDataURL","send","start","catch","err","closeCamera","tracks","getTracks","forEach","x","stop","getDetection","closeDetection"],"sources":["C:/Users/31136/Desktop/face_anti_front/src/components/onlineAlaysis.vue"],"sourcesContent":["<template>\r\n <div class=\"container\">\r\n    <video src=\"\" ref=\"video\" id=\"video\"></video>\r\n    <canvas id=\"camera\"></canvas>\r\n    <div class=\"botton_box\">\r\n        <el-button type=\"primary\" @click=\"getCamera()\">打开摄像头</el-button>\r\n        <el-button type=\"danger\" @click=\"closeCamera()\">关闭摄像头</el-button>\r\n        <el-button type=\"primary\" @click=\"getDetection()\">开始检测</el-button>\r\n        <el-button type=\"danger\" @click=\"closeDetection()\">关闭检测</el-button>\r\n        <el-button type=\"primary\" @click=\"function(){}\">保存截图</el-button>\r\n        \r\n    </div>\r\n    \r\n </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref,onMounted,onBeforeUnmount,} from 'vue';\r\nconst video = ref()\r\nconst mediaStreamTrack = ref({})\r\nconst canvas = ref()\r\nconst ctx = ref()\r\nconst socket = new WebSocket('ws://localhost:8888');\r\nconst mediaRecorder = ref()\r\nonMounted(()=>{\r\n    console.log('正在打开摄像头。。。')\r\n    getCamera();\r\n    //连接后端socket\r\n    connection()\r\n    reconnection()\r\n})\r\nfunction connection(){\r\n    socket.onopen = ()=>{\r\n        console.log('socket 已打开...')\r\n    }\r\n}\r\nasync function reconnection(){\r\n    console.log('Attempting to reconnect...');\r\n    setTimeout(connection(), 3000); // 3秒后尝试重新连接\r\n}\r\nfunction getCamera(){\r\n    canvas.value = document.getElementById('camera');\r\n    ctx.value = canvas.value.getContext('2d');\r\n    if(navigator.mediaDevices){\r\n        navigator.mediaDevices.getUserMedia({video:true,audio:false}).then((stream)=>{\r\n            video.value.srcObject = stream;\r\n            video.value.play();\r\n            let  mediaRecorder = new MediaRecorder(stream);\r\n            mediaRecorder.ondataavailable = (event) => {\r\n            console.log(event.data,\"aaaa\")\r\n            if (event.data && event.data.size > 0) {\r\n                console.log(\"aaaaa\");\r\n                const canvas = document.createElement('canvas');\r\n                canvas.width = video.value.videoWidth;\r\n                canvas.height = video.value.videoHeight;\r\n                console.log(video.value.videoWidth);\r\n                const ctx = canvas.getContext('2d');\r\n                ctx.drawImage(video.value, 0, 0, canvas.width, canvas.height);\r\n                // 将图像数据编码为 base64 字符串\r\n                const base64ImageData = canvas.toDataURL('image/jpeg');\r\n                // 发送 base64 编码后的图像数据给后端处理\r\n                socket.send(base64ImageData);  \r\n            }\r\n    };\r\n            mediaRecorder.start(66);\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }else{\r\n        //防止浏览器版本旧不支持mediaDevices\r\n        navigator.mediaDevices={}\r\n    }\r\n}\r\nonBeforeUnmount(()=>{\r\n    //closeCamera();\r\n})\r\nfunction closeCamera(){\r\n    let stream = video.value.srcObject;\r\n    if (!stream) return;\r\n    let tracks = stream.getTracks();\r\n    tracks.forEach((x) => {\r\n    x.stop();\r\n    });\r\n}\r\nfunction getDetection(){\r\n    console.log('WebSocket connection established.');\r\n}\r\n\r\nfunction closeDetection(){\r\n    mediaRecorder.value.stop();\r\n}\r\n\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.container{\r\n    display: flex;\r\n    width: 84vw;\r\n    max-height: 90vh;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: #f0f0f0;\r\n    padding-top: 1%;\r\n    padding-bottom: 3%;\r\n}\r\n#camera{\r\n    width:0;\r\n    height:0;\r\n    display: none;\r\n}\r\n#video{\r\n    width:60vw;\r\n}\r\n.botton_box{\r\n    margin-top: 10px;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}