{"ast":null,"code":"import { createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4f455327\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  src: \"\",\n  ref: \"video\",\n  id: \"video\"\n};\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"canvas\", {\n  id: \"camera\"\n}, null, -1 /* HOISTED */));\nconst _hoisted_4 = {\n  class: \"botton_box\"\n};\nexport function render(_ctx, _cache) {\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"video\", _hoisted_2, null, 512 /* NEED_PATCH */), _hoisted_3, _createElementVNode(\"div\", _hoisted_4, [_createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: _cache[0] || (_cache[0] = $event => _ctx.getCamera())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"打开摄像头\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_button, {\n    type: \"danger\",\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.closeCamera())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"关闭摄像头\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: _cache[2] || (_cache[2] = $event => _ctx.getDetection())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"开始检测\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_button, {\n    type: \"danger\",\n    onClick: _cache[3] || (_cache[3] = $event => _ctx.closeDetection())\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"关闭检测\")]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_button, {\n    type: \"primary\",\n    onClick: _cache[4] || (_cache[4] = function () {})\n  }, {\n    default: _withCtx(() => [_createTextVNode(\"保存截图\")]),\n    _: 1 /* STABLE */\n  })])]);\n}","map":{"version":3,"names":["class","src","ref","id","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_createVNode","_component_el_button","type","onClick","_cache","$event","_ctx","getCamera","default","_withCtx","_createTextVNode","_","closeCamera","getDetection","closeDetection"],"sources":["C:\\Users\\31136\\Desktop\\face_anti_front\\src\\components\\onlineAlaysis.vue"],"sourcesContent":["<template>\r\n <div class=\"container\">\r\n    <video src=\"\" ref=\"video\" id=\"video\"></video>\r\n    <canvas id=\"camera\"></canvas>\r\n    <div class=\"botton_box\">\r\n        <el-button type=\"primary\" @click=\"getCamera()\">打开摄像头</el-button>\r\n        <el-button type=\"danger\" @click=\"closeCamera()\">关闭摄像头</el-button>\r\n        <el-button type=\"primary\" @click=\"getDetection()\">开始检测</el-button>\r\n        <el-button type=\"danger\" @click=\"closeDetection()\">关闭检测</el-button>\r\n        <el-button type=\"primary\" @click=\"function(){}\">保存截图</el-button>\r\n        \r\n    </div>\r\n    \r\n </div>\r\n</template>\r\n\r\n<script setup>\r\nimport {ref,onMounted,onBeforeUnmount,} from 'vue';\r\nconst video = ref()\r\nconst mediaStreamTrack = ref({})\r\nconst canvas = ref()\r\nconst ctx = ref()\r\nconst socket = new WebSocket('ws://localhost:8888');\r\nconst dataChannel  = ref()\r\nconst peerConnection = ref()\r\nonMounted(()=>{\r\n    console.log('正在打开摄像头。。。')\r\n    getCamera();\r\n    //连接后端socket\r\n    connection()\r\n    reconnection()\r\n})\r\nfunction connection(){\r\n    socket.onopen = ()=>{\r\n        console.log('socket 已打开...')\r\n    }\r\n}\r\nasync function reconnection(){\r\n    console.log('Attempting to reconnect...');\r\n    setTimeout(connection(), 3000); // 3秒后尝试重新连接\r\n}\r\nfunction getCamera(){\r\n    canvas.value = document.getElementById('camera');\r\n    ctx.value = canvas.value.getContext('2d');\r\n    if(navigator.mediaDevices){\r\n        navigator.mediaDevices.getUserMedia({video:true,audio:false}).then((stream)=>{\r\n            video.value.srcObject = stream;\r\n            video.value.play();\r\n            mediaStreamTrack.value = stream.getTracks()[0];\r\n            //创建WebRTC通道\r\n            peerConnection.value = new RTCPeerConnection()\r\n            dataChannel.value = peerConnection.value.createDataChannel('videoChannel')\r\n        }).catch((err)=>{\r\n            console.log(err)\r\n        })\r\n    }else{\r\n        //防止浏览器版本旧不支持mediaDevices\r\n        navigator.mediaDevices={}\r\n    }\r\n}\r\nonBeforeUnmount(()=>{\r\n    closeCamera();\r\n})\r\nfunction closeCamera(){\r\n    let stream = video.value.srcObject;\r\n    if (!stream) return;\r\n    let tracks = stream.getTracks();\r\n    tracks.forEach((x) => {\r\n    x.stop();\r\n    });\r\n}\r\nfunction getDetection(){\r\n    console.log(\"aaa\")\r\n    peerConnection.value.ondatachannel  = (event){\r\n        \r\n    }\r\n    dataChannel.value.onopen = ()=>{\r\n        console.log('Data channel opened');\r\n        var chunkSize = 16000; // 每次发送的数据块大小\r\n        var sendBuffer = function(offset) {\r\n            let stream = video.value.srcObject\r\n            var slice = stream.getVideoTracks()[0].slice(offset, offset + chunkSize);\r\n            var reader = new FileReader();\r\n            reader.onload = function(event) {\r\n                if (dataChannel.value.readyState === 'open') {\r\n                    dataChannel.value.send(event.target.result);\r\n                    if (offset + chunkSize < stream.getVideoTracks()[0].length) {\r\n                        sendBuffer(offset + chunkSize);\r\n                    }\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(slice);\r\n        };\r\n\r\n        sendBuffer(0); // 开始发送视频流\r\n    };\r\n}\r\n\r\nfunction closeDetection(){\r\n    dataChannel.value.close();\r\n}\r\n\r\n</script>\r\n\r\n<style scoped lang=\"scss\">\r\n.container{\r\n    display: flex;\r\n    width: 84vw;\r\n    max-height: 90vh;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    background-color: #f0f0f0;\r\n    padding-top: 1%;\r\n    padding-bottom: 3%;\r\n}\r\n#camera{\r\n    width:0;\r\n    height:0;\r\n    display: none;\r\n}\r\n#video{\r\n    width:60vw;\r\n}\r\n.botton_box{\r\n    margin-top: 10px;\r\n    display: flex;\r\n    flex-direction: row;\r\n}\r\n</style>"],"mappings":";;;EACMA,KAAK,EAAC;AAAW;;EACZC,GAAG,EAAC,EAAE;EAACC,GAAG,EAAC,OAAO;EAACC,EAAE,EAAC;;gEAC7BC,mBAAA,CAA6B;EAArBD,EAAE,EAAC;AAAQ;;EACdH,KAAK,EAAC;AAAY;;;uBAH1BK,mBAAA,CAYM,OAZNC,UAYM,GAXHF,mBAAA,CAA6C,SAA7CG,UAA6C,+BAC7CC,UAA6B,EAC7BJ,mBAAA,CAOM,OAPNK,UAOM,GANFC,YAAA,CAAgEC,oBAAA;IAArDC,IAAI,EAAC,SAAS;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAC,SAAS;;IALnDC,OAAA,EAAAC,QAAA,CAKuD,MAAK,CAL5DC,gBAAA,CAKuD,OAAK,E;IAL5DC,CAAA;MAMQX,YAAA,CAAiEC,oBAAA;IAAtDC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAM,WAAW;;IANpDJ,OAAA,EAAAC,QAAA,CAMwD,MAAK,CAN7DC,gBAAA,CAMwD,OAAK,E;IAN7DC,CAAA;MAOQX,YAAA,CAAkEC,oBAAA;IAAvDC,IAAI,EAAC,SAAS;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAO,YAAY;;IAPtDL,OAAA,EAAAC,QAAA,CAO0D,MAAI,CAP9DC,gBAAA,CAO0D,MAAI,E;IAP9DC,CAAA;MAQQX,YAAA,CAAmEC,oBAAA;IAAxDC,IAAI,EAAC,QAAQ;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAAEC,IAAA,CAAAQ,cAAc;;IARvDN,OAAA,EAAAC,QAAA,CAQ2D,MAAI,CAR/DC,gBAAA,CAQ2D,MAAI,E;IAR/DC,CAAA;MASQX,YAAA,CAAgEC,oBAAA;IAArDC,IAAI,EAAC,SAAS;IAAEC,OAAK,EAAAC,MAAA,QAAAA,MAAA,MAAE,cAAY;;IATtDI,OAAA,EAAAC,QAAA,CASwD,MAAI,CAT5DC,gBAAA,CASwD,MAAI,E;IAT5DC,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}